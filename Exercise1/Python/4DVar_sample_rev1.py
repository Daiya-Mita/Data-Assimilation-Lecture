# ---
# jupyter:
#   jupytext:
#     text_representation:
#       extension: .py
#       format_name: light
#       format_version: '1.5'
#       jupytext_version: 1.7.1
#   kernelspec:
#     display_name: Python 3
#     language: python
#     name: python3
# ---

# +
'''
    Sample Program of 4DVar
    System Model: dx/dt = -x^2
'''

# import modules
import random
import numpy as np
import matplotlib.pyplot as plt
from tqdm import tqdm
from scipy.optimize import minimize

# fix seed
RANDOM_SEED = 0
random.seed(RANDOM_SEED)
np.random.seed(RANDOM_SEED)

# parameters
Nt = 520
dt = 0.01
t = dt * np.arange(Nt)
t_obs = 50 * (np.arange(10) + 1)
x0_T = 2.0


# +
# forward simulation
def simulation(x0):
    
    x = np.zeros(Nt)
    x[0] = x0
    
    for i in range(1,Nt):
        x[i] = x[i-1] - x[i-1]**2 * dt
        
    return x

# true simulation
x_T = simulation(x0_T)

# observational data generated by the true solution
y = x_T                                  # noise-free
#y = x_T + np.random.normal(0, 0.05, Nt)  # noise added

# cost function
def J(x0, out_lmd):
    
    x = simulation(x0)
    res = 0
    
    for i in range(len(t_obs)):
        res += 0.5 * (x[t_obs[i]] - y[t_obs[i]])**2
    
    return res

# gradient of cost function computed by 4DVar
lmd = np.zeros(Nt)

def gradJ(x0, out_lmd):
    
    x = simulation(x0)
    lm = np.zeros(Nt)
    
    for i in range(Nt-2,-1,-1):
        if i in t_obs:
            lm[i] = lm[i+1] + 2 * x[i] * lm[i+1] * dt + (x[i] - y[i]) * dt
        else:
            lm[i] = lm[i+1] + 2 * x[i] * lm[i+1] * dt
        
    if out_lmd:
        global lmd
        lmd = lm.copy()
    
    return lm[0]


# +
# optimize the initial condition based on a gradient method
x0_init = 4.0
x_init = simulation(x0_init)
dJ = gradJ(x0_init, True)
lmd_init = lmd.copy()

opt = minimize(
    fun = lambda x : J(x, False),
    x0 = x0_init,
    method = 'CG',
    jac = lambda x : gradJ(x, False),
)
x0_opt = opt.x
x_opt = simulation(x0_opt)
# -

# time series
plt.figure(figsize=(6,4))
plt.title('4DVar for System Model  $\\frac{\\mathrm{d}x}{\\mathrm{d}t}=-x^2$')
plt.scatter(t_obs * dt, [y[i] for i in t_obs], label='observation')
plt.plot(t, x_T, label='true')
plt.plot(t, x_init, label='initial')
plt.plot(t, x_opt, label='optimized')
plt.legend(loc='best')
plt.show()

# adjoint variable
plt.figure(figsize=(6,4))
plt.title('Adjoint variable for 4DVar')
plt.plot(t, lmd_init)
plt.show()

# adjoint variable
plt.figure(figsize=(6,4))
plt.title('Adjoint Variable for 4DVar')
plt.plot(t, lmd_init)
plt.show()
